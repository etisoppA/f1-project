import F1Prediction.LinearRegression;

import java.util.Arrays;
import java.util.ArrayList;

import static F1Prediction.LinearRegression.regression;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Alexc
 */
public class forecastFrame extends javax.swing.JFrame {

    /**
     * Creates new form forecastFrame
     */
    public forecastFrame() {
        initComponents();
    }
    private int[] verstappen = {0, 1, 2, 2, 3, 2, 10, 15, 12};
    private int[] perez = {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2};
    private int[] alonso = {0, 0, 1, 0, 7, 7, 4, 2, 0, 5, 1, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    private int[] hamilton = {4, 5, 2, 3, 3, 4, 1, 11, 10, 10, 9, 11, 11, 11, 8, 0, 0};
    private int[] sainz = {0, 0, 0, 0, 0, 0, 0, 1, 0};
    private int[] leclerc = {0, 2, 0, 0, 3, 0};
    private int[] russel = {0, 0, 0, 1, 0};
    private int[] norris = {0, 0, 0, 0};
    private int[] stroll = {0, 0, 0, 0, 0, 0};
    private int[] gasly = {0, 0, 0, 1, 0, 0};
    private int[] ocon = {0, 0, 0, 0, 0, 1, 0};
    private int[] piastri = {0, 0, 0};
    private int[] albon = {0, 0, 0, 0};
    private int[] hulkenberg = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    private int[] bottas = {0, 0, 0, 0, 3, 0, 4, 2, 1, 0};
    private int[] guanyu = {0, 0, 0};
    private int[] tsunoda = {0, 0, 0};
    private int[] magnussen = {0, 0, 0, 0, 0};
    private int[] sargeant = {0, 0, 0};
    private int[] lawson = {0, 0, 0};

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        forecastPane = new javax.swing.JScrollPane();
        forecastTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        forecastPane.setBackground(new java.awt.Color(18, 9, 181));
        forecastTable.setForeground(new java.awt.Color(255, 255, 255));
        forecastTable.setBackground(new java.awt.Color(18, 9, 181));
        forecastTable.setModel(new javax.swing.table.DefaultTableModel(
                new String [][] {
                        {"Max Verstappen", "2015-2023", "2024", String.valueOf(regression(verstappen))},
                        {"Sergio Perez", "2011-2023", "2024", String.valueOf(regression(perez))},
                        {"Fernando Alonso", "2001-2023", "2024", String.valueOf(regression(alonso))},
                        {"Lewis Hamilton", "2007-2023", "2024", String.valueOf(regression(hamilton))},
                        {"Carlos Sainz", "2015-2023", "2024", String.valueOf(regression(sainz))},
                        {"Charles Leclerc", "2018-2023", "2024", String.valueOf(regression(leclerc))},
                        {"George Russel", "2019-2023", "2024", String.valueOf(regression(russel))},
                        {"Lando Norris", "2019-2023", "2024", String.valueOf(regression(norris))},
                        {"Lance Stroll", "2017-2023", "2024", String.valueOf(regression(stroll))},
                        {"Pierce Gasly", "2017-2023", "2024", String.valueOf(regression(gasly))},
                        {"Esteban Ocon", "2016-2023", "2024", String.valueOf(regression(ocon))},
                        {"Oscar Piastri", "2023", "2024", String.valueOf(regression(piastri))},
                        {"Alexander Albon", "2019-2023", "2024", String.valueOf(regression(albon))},
                        {"Nico Hulkenberg", "2010-2023", "2024", String.valueOf(regression(hulkenberg))},
                        {"Valtteri Bottas", "2013-2023", "2024", String.valueOf(regression(bottas))},
                        {"Zhou Guanyu", "2022-2023", "2024", String.valueOf(regression(guanyu))},
                        {"Yuki Tsunoda", "2021-2023", "2024", String.valueOf(regression(tsunoda))},
                        {"Kevin Magnussen", "2014-2023", "2024", String.valueOf(regression(magnussen))},
                        {"Logan Sargeant", "2023", "2024", String.valueOf(regression(sargeant))},
                        {"Liam Lawson", "2023", "2024", String.valueOf(regression(lawson))}

                },
                new String [] {
                        "Name", "Active Years", "Prediction Year", "Wins (Rounded)"
                }
        ));
        forecastPane.setViewportView(forecastTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(forecastPane, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(forecastPane, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    /*
     * @param args the command line arguments
     */
    /*
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(forecastFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(forecastFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(forecastFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(forecastFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new forecastFrame().setVisible(true);
            }
        });
    } */

    public static void run() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(forecastFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(forecastFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(forecastFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(forecastFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new forecastFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JScrollPane forecastPane;
    private javax.swing.JTable forecastTable;
    // End of variables declaration
}
